//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// ğŸ“„ File: src/hooks/useTheme.js
// ğŸ§© Type: Custom Hook
// ğŸ“š Description: Hook pour la gestion du thÃ¨me dynamique (clair/sombre/systÃ¨me)
// ğŸ•’ Version: 1.0 - 2025-01-15
// ğŸ§­ Used in: Tous les composants qui utilisent le thÃ¨me
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//
import { useColorScheme } from 'react-native';
import { useAppStore } from '../stores/useAppStore';
import { getTheme, themeUtils } from '../config/theme';

/**
 * Hook principal pour la gestion du thÃ¨me
 * @returns {Object} - Objet avec thÃ¨me actuel et fonctions utilitaires
 */
export const useTheme = () => {
  // DÃ©tecter le thÃ¨me systÃ¨me
  const systemColorScheme = useColorScheme();
  
  // RÃ©cupÃ©rer le thÃ¨me choisi par l'utilisateur depuis le store
  const { currentTheme, setTheme } = useAppStore();
  
  // DÃ©terminer le thÃ¨me effectif
  const isDark = currentTheme === 'dark' || 
    (currentTheme === 'system' && systemColorScheme === 'dark');
  
  // Obtenir l'objet thÃ¨me complet
  const theme = getTheme(isDark);
  
  // Fonctions utilitaires
  const toggleTheme = () => {
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
  };
  
  const setSystemTheme = () => {
    setTheme('system');
  };
  
  const setLightTheme = () => {
    setTheme('light');
  };
  
  const setDarkTheme = () => {
    setTheme('dark');
  };
  
  // Fonctions utilitaires Ã©tendues avec le contexte du thÃ¨me actuel
  const utils = {
    ...themeUtils,
    // Override avec le thÃ¨me actuel
    getTextColorOn: (backgroundColor) => {
      return themeUtils.getTextColorOn(backgroundColor, isDark);
    },
    getTextColorOnPhase: (phase) => {
      return themeUtils.getTextColorOnPhase(phase, isDark);
    },
  };
  
  return {
    // Ã‰tat du thÃ¨me
    theme,
    isDark,
    isLight: !isDark,
    currentTheme,
    systemColorScheme,
    
    // Actions
    toggleTheme,
    setTheme,
    setSystemTheme,
    setLightTheme,
    setDarkTheme,
    
    // Utilitaires
    ...utils,
  };
};

/**
 * Hook simplifiÃ© pour obtenir juste le thÃ¨me
 * @returns {Object} - Objet thÃ¨me
 */
export const useCurrentTheme = () => {
  const { theme } = useTheme();
  return theme;
};

/**
 * Hook pour vÃ©rifier si on est en mode sombre
 * @returns {boolean} - true si mode sombre
 */
export const useIsDarkMode = () => {
  const { isDark } = useTheme();
  return isDark;
}; 