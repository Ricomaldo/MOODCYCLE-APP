//
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üìÑ File: src/utils/cycleCalculations.js
// üß© Type: Cycle Utilities
// üìö Description: Fonctions pures calculs cycle menstruel
// üïí Version: 1.0 - 2025-06-21
// üß≠ Used in: useCycle hook, components
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//

import { CYCLE_DEFAULTS } from '../config/cycleConstants';

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// üßÆ CALCULS DE BASE
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * Calcule les jours √©coul√©s depuis la derni√®re p√©riode
 */
export const getDaysSinceLastPeriod = (lastPeriodDate) => {
    if (!lastPeriodDate) return 0;
    
    return Math.floor(
      (Date.now() - new Date(lastPeriodDate).getTime()) / (1000 * 60 * 60 * 24)
    );
  };
  
  /**
   * Calcule le jour actuel dans le cycle (1-28+)
   */
  export const getCurrentCycleDay = (lastPeriodDate, cycleLength = CYCLE_DEFAULTS.LENGTH) => {
    if (!lastPeriodDate) return 1;
    
    const daysSince = getDaysSinceLastPeriod(lastPeriodDate);
    return (daysSince % cycleLength) + 1;
  };
  
  /**
   * D√©termine la phase actuelle du cycle
   */
  export const getCurrentPhase = (lastPeriodDate, cycleLength = CYCLE_DEFAULTS.LENGTH, periodDuration = CYCLE_DEFAULTS.PERIOD_DURATION) => {
    if (!lastPeriodDate) return 'menstrual';
    
    const daysSince = getDaysSinceLastPeriod(lastPeriodDate);
    const currentDay = (daysSince % cycleLength) + 1;
    
    // Logique phases
    if (currentDay <= periodDuration) return 'menstrual';
    if (currentDay <= cycleLength * 0.4) return 'follicular';
    if (currentDay <= cycleLength * 0.6) return 'ovulatory';
    return 'luteal';
  };
  
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // üìä INFOS ENRICHIES
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  
  /**
   * M√©tadonn√©es des phases - COULEURS SYNCHRONIS√âES AVEC THEME.JS
   */
  export const PHASE_METADATA = {
    menstrual: {
      name: 'Menstruelle',
      emoji: 'üåô',
      color: '#F44336', // Grenat Doux - sync avec theme.js
      energy: 'repos',
      description: 'Phase de r√©g√©n√©ration et introspection'
    },
    follicular: {
      name: 'Folliculaire', 
      emoji: 'üå±',
      color: '#FFC107', // Miel Dor√© - sync avec theme.js
      energy: 'croissance',
      description: 'Nouvelle √©nergie et cr√©ativit√©'
    },
    ovulatory: {
      name: 'Ovulatoire',
      emoji: '‚òÄÔ∏è', 
      color: '#00BCD4', // Lagune Calme - sync avec theme.js
      energy: 'pic',
      description: '√ânergie et confiance maximales'
    },
    luteal: {
      name: 'Lut√©ale',
      emoji: 'üçÇ',
      color: '#673AB7', // Lavande Mystique - sync avec theme.js
      energy: 'd√©clin',
      description: 'Pr√©paration et ralentissement'
    }
  };
  
  /**
   * Retourne les infos compl√®tes de la phase actuelle
   */
  export const getCurrentPhaseInfo = (lastPeriodDate, cycleLength = CYCLE_DEFAULTS.LENGTH, periodDuration = CYCLE_DEFAULTS.PERIOD_DURATION) => {
    const phase = getCurrentPhase(lastPeriodDate, cycleLength, periodDuration);
    const day = getCurrentCycleDay(lastPeriodDate, cycleLength);
    
    return {
      phase,
      day,
      ...PHASE_METADATA[phase]
    };
  };
  
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // üîÆ PR√âDICTIONS
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  
  /**
   * Calcule la date pr√©vue des prochaines r√®gles
   */
  export const getNextPeriodDate = (lastPeriodDate, cycleLength = CYCLE_DEFAULTS.LENGTH) => {
    if (!lastPeriodDate) return null;
    
    const lastDate = new Date(lastPeriodDate);
    const nextDate = new Date(lastDate);
    nextDate.setDate(lastDate.getDate() + cycleLength);
    
    return nextDate;
  };
  
  /**
   * Jours restants jusqu'aux prochaines r√®gles
   */
  export const getDaysUntilNextPeriod = (lastPeriodDate, cycleLength = CYCLE_DEFAULTS.LENGTH) => {
    const nextDate = getNextPeriodDate(lastPeriodDate, cycleLength);
    if (!nextDate) return null;
    
    const today = new Date();
    const diffTime = nextDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return Math.max(0, diffDays);
  };
  
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // üéØ VALIDATION
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  
  /**
   * Valide si les donn√©es cycle sont coh√©rentes
   */
  export const validateCycleData = (cycleData) => {
    const { lastPeriodDate, length, periodDuration } = cycleData;
    
    const errors = [];
    
    if (!lastPeriodDate) {
      errors.push('Date derni√®res r√®gles manquante');
    }
    
    if (length < CYCLE_DEFAULTS.MIN_LENGTH || length > CYCLE_DEFAULTS.MAX_LENGTH) {
      errors.push(`Dur√©e cycle invalide (${CYCLE_DEFAULTS.MIN_LENGTH}-${CYCLE_DEFAULTS.MAX_LENGTH} jours)`);
    }
    
    if (periodDuration < CYCLE_DEFAULTS.MIN_PERIOD_DURATION || periodDuration > CYCLE_DEFAULTS.MAX_PERIOD_DURATION) {
      errors.push(`Dur√©e r√®gles invalide (${CYCLE_DEFAULTS.MIN_PERIOD_DURATION}-${CYCLE_DEFAULTS.MAX_PERIOD_DURATION} jours)`);
    }
    
    if (periodDuration >= length) {
      errors.push('Dur√©e r√®gles sup√©rieure au cycle');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  };
  
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // üß™ HELPERS DE TEST
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  
  /**
   * Cr√©e des donn√©es cycle pour tests
   */
  export const createMockCycleData = (daysAgo = 0, cycleLength = CYCLE_DEFAULTS.LENGTH) => {
    const mockDate = new Date();
    mockDate.setDate(mockDate.getDate() - daysAgo);
    
    return {
      lastPeriodDate: mockDate.toISOString(),
      length: cycleLength,
      periodDuration: CYCLE_DEFAULTS.PERIOD_DURATION,
      isRegular: true
    };
  };
  
  /**
   * Simule un cycle √† une phase donn√©e
   */
  export const createCycleAtPhase = (targetPhase, cycleLength = CYCLE_DEFAULTS.LENGTH) => {
    const phaseDays = {
      menstrual: 2,
      follicular: 10, 
      ovulatory: 15,
      luteal: 22
    };
    
    const daysAgo = phaseDays[targetPhase] || 0;
    return createMockCycleData(daysAgo, cycleLength);
  };