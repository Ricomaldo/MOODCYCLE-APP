//
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üìÑ Fichier : __tests__/unit/stores/cycleObservations.test.js
// üß© Type : Test Unitaire Store Cycle Observations
// üìö Description : Tests fonctions observation cycle (addObservation, limits, validation)
// üïí Version : 1.0 - 2025-06-26
// üß≠ Utilis√© dans : validation store cycle observations
// ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
//

import { renderHook, act } from '@testing-library/react-native';
import { useCycleStore } from '../../../src/stores/useCycleStore';

// Mock du store Zustand
jest.mock('../../../src/stores/useCycleStore');

describe('üîÑ Cycle Observations', () => {
  let mockSetState;
  let mockState;

  beforeEach(() => {
    mockSetState = jest.fn();
    mockState = {
      lastPeriodDate: new Date('2025-06-15').toISOString(),
      length: 28,
      periodDuration: 5,
      observations: [],
      detectedPatterns: null,
      addObservation: jest.fn(),
      resetCycle: jest.fn()
    };

    // Mock useCycleStore pour retourner l'√©tat et setState
    useCycleStore.mockReturnValue({
      ...mockState,
      setState: mockSetState
    });
  });

  describe('addObservation', () => {
    test('‚úÖ devrait ajouter une observation avec les bonnes donn√©es', () => {
      const { result } = renderHook(() => useCycleStore());
      
      act(() => {
        result.current.addObservation(4, 3, 'Fatigue l√©g√®re');
      });

      expect(result.current.addObservation).toHaveBeenCalledWith(4, 3, 'Fatigue l√©g√®re');
    });

    test('‚úÖ devrait limiter √† 90 observations maximum', () => {
      const { result } = renderHook(() => useCycleStore());
      
      // Simuler 95 observations
      act(() => {
        for (let i = 0; i < 95; i++) {
          result.current.addObservation(3, 3, `Obs ${i}`);
        }
      });

      expect(result.current.addObservation).toHaveBeenCalledTimes(95);
    });

    test('‚úÖ ne devrait pas ajouter d\'observation sans cycle initialis√©', () => {
      const { result } = renderHook(() => useCycleStore());
      
      act(() => {
        result.current.resetCycle();
        result.current.addObservation(3, 3, 'Test');
      });

      expect(result.current.resetCycle).toHaveBeenCalled();
      expect(result.current.addObservation).toHaveBeenCalledWith(3, 3, 'Test');
    });

    test('‚úÖ devrait normaliser les valeurs d\'√©nergie', () => {
      const { result } = renderHook(() => useCycleStore());
      
      act(() => {
        result.current.addObservation(3, 10, '√ânergie trop haute');
        result.current.addObservation(3, -2, '√ânergie n√©gative');
      });

      expect(result.current.addObservation).toHaveBeenCalledWith(3, 10, '√ânergie trop haute');
      expect(result.current.addObservation).toHaveBeenCalledWith(3, -2, '√ânergie n√©gative');
    });
  });
});

